[{"/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/App.js":"1","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/ChatList.jsx":"2","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Matching.jsx":"3","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/SideMenu.jsx":"4","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Tendency.jsx":"5","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Loading.jsx":"6","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/index.js":"7","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/context/AuthContext.js":"8","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/firebase-config.js":"9","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Header.jsx":"10","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/ChatBox.jsx":"11","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Login.jsx":"12","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Footer.jsx":"13","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Signup.jsx":"14","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Sidebar.jsx":"15","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Profile.jsx":"16"},{"size":1611,"mtime":1691279257514,"results":"17","hashOfConfig":"18"},{"size":6450,"mtime":1691279966182,"results":"19","hashOfConfig":"18"},{"size":5516,"mtime":1691279257488,"results":"20","hashOfConfig":"18"},{"size":1045,"mtime":1691279257489,"results":"21","hashOfConfig":"18"},{"size":1928,"mtime":1691323733957,"results":"22","hashOfConfig":"18"},{"size":1892,"mtime":1691285948739,"results":"23","hashOfConfig":"18"},{"size":415,"mtime":1690764501985,"results":"24","hashOfConfig":"18"},{"size":615,"mtime":1690764501985,"results":"25","hashOfConfig":"18"},{"size":1260,"mtime":1690970520048,"results":"26","hashOfConfig":"18"},{"size":1419,"mtime":1690799725746,"results":"27","hashOfConfig":"18"},{"size":6107,"mtime":1691230346305,"results":"28","hashOfConfig":"18"},{"size":2900,"mtime":1691121072971,"results":"29","hashOfConfig":"18"},{"size":817,"mtime":1689743781110,"results":"30","hashOfConfig":"18"},{"size":6118,"mtime":1691222264791,"results":"31","hashOfConfig":"18"},{"size":1967,"mtime":1691127942512,"results":"32","hashOfConfig":"18"},{"size":7017,"mtime":1691209508849,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},"u7s5di",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"38"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"38"},"/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/App.js",["90","91"],[],"import './App.css';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Login from './components/Login';\nimport Signup from './components/Signup';\nimport ChatBox from './components/ChatBox';\nimport ChatList from './components/ChatList';\nimport Matching from './components/Matching';\nimport SideMenu from './components/SideMenu';\nimport Profile from './components/Profile';\nimport Sidebar from './components/Sidebar';\n\nimport Loading from './components/Loading';\nimport Tendency from './components/Tendency';\n\n\nimport { Route, Routes, useLocation, Navigate } from 'react-router-dom';\n\n\n\n\nfunction App() {\n\n  const location = useLocation();\n  const showSideMenu = location.pathname === '/chatbox' || location.pathname === '/chatlist' || location.pathname === '/matching' || location.pathname === '/profile';\n\n\n  return (\n    <div className=\"body\">\n      <Header/>\n\n      {showSideMenu && <Sidebar><SideMenu/></Sidebar>}\n\n      {/* <Sidebar><SideMenu/></Sidebar> */}\n\n      <Routes>\n        <Route path='/signup' element={<Signup/>}></Route>\n        <Route path='/' element={<Login/>}></Route>\n        <Route path='/chatbox' element={<ChatBox/>}></Route>\n        <Route path='/chatlist' element={<ChatList/>}></Route>\n        <Route path='/matching' element={<Matching/>}></Route>\n        <Route path='/profile' element={<Profile/>}></Route>\n        {/* 테스트용 */}\n        <Route path='/loading' element={<Loading/>}></Route>\n        <Route path='/tendency' element={<Tendency/>}></Route>\n      </Routes>\n\n      {/* <Footer/> */}\n    </div>\n  );\n}\n\nexport default App;",[],"/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/ChatList.jsx",["92","93","94","95","96","97","98","99","100","101"],[],"\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport VanillaTilt from 'vanilla-tilt';\nimport { db, auth } from \"../firebase-config\";\nimport {\n  collection,\n  where,\n  onSnapshot,\n  query,\n  orderBy,\n  getDocs,\n  arrayRemove,\n  updateDoc\n} from \"firebase/firestore\";\nimport { AuthContext } from \"../context/AuthContext\";\nimport { chatList } from './Matching';\nimport { useNavigate } from \"react-router-dom\";\nimport Loading from './Loading';\n\n\n/* 바닐라 틸트를 실행시키기 위한 함수입니다. - 작업자: 이찬용\n틸트안에 속성을 줌으로서 바닐라 틸트 제작자가 만든 기능들을 활용합니다.\n이 바닐라 틸트는 채팅창 대화 미리보기에 적용 되었습니다.*/\nfunction Tilt(props) {\n  const { options, ...rest } = props;\n  const tilt = useRef(null);\n\n  useEffect(() => {\n    VanillaTilt.init(tilt.current, options);\n  }, [options]);\n\n  return <div ref={tilt} {...rest} />;\n}\n\n\n\n// 팝업창을 끄기 위해 만든 함수안에 들어가는 변수를 담기위한 것입니다. .-작업자 : 이찬용 \n\nconst ChatList = () => {\n\n\n  const { currentUser } = useContext(AuthContext);\n  const nav = useNavigate()\n\n  // isVisible의 초기값을 false로 설정하여 새로운 메시지가 없을 때는 팝업이 뜨지 않도록 했습니다.\n  const [isVisible, setIsVisible] = useState(false);\n  const closePopup = () => {\n    setIsVisible(false);\n  };\n\n  // VanillaTilt를 실행시키기 위한 함수입니다. -작업자 : 이찬용\n  const options = {\n    scale: 1.01,\n    speed: 1000,\n    max: 5\n  };\n\n  \n  const [chats, setChats] = useState([]);\n  const [user, setUser] = useState(null)\n\n  const userRef = collection(db, \"users\");\n  \n  const [selectedUser, setSelectedUser] = useState(\"\")\n\n  useEffect(() => {\n    if (currentUser && currentUser.email) {\n      const q = query(collection(db, \"users\"), where(\"id\", \"==\", currentUser.email));\n      getDocs(q).then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n          setUser(doc.data());\n          console.log(`users:${(doc.data().chatListName).length}`);\n        });\n      });\n    }\n  }, [currentUser]);\n    \n  \n\n  // chats 상태 값이 변화할 때마다 실행되는 useEffect를 추가했습니다. - 작업자 : 이찬용\n  // 이로써 새로운 채팅이 추가될 때마다 isVisible 상태 값을 true로 변경하여 팝업창을 띄웁니다.  - 작업자 : 이찬용\n  // chats의 이전 값을 기억하기 위한 ref입니다.  - 작업자 : 이찬용\n  const prevChats = useRef(chats);\n\n\n  const handleClick = (user, index) => {\n    setSelectedUser(user)\n    sessionStorage.setItem('selectedUserName', user.chatListName[index])\n    sessionStorage.setItem('selectedUserProfileUrl', user.chatListProfileUrl[index])\n    \n    if (user.chatListProfileUrl[index] > currentUser.displayName) {\n      sessionStorage.setItem('selectedRoom', `${user.chatListName[index]}+${currentUser.displayName}`)\n    } else {\n      sessionStorage.setItem('selectedRoom', `${currentUser.displayName}+${user.chatListName[index]}`)\n    }\n    nav('/chatbox')\n  }\n\n  const handleClickBot = () => {\n    setSelectedUser('챗봇:지호')\n    sessionStorage.setItem('selectedUserName', '챗봇:지호')\n    sessionStorage.setItem('selectedUserProfileUrl', 'https://firebasestorage.googleapis.com/v0/b/chatapp2-aa1ab.appspot.com/o/images%2F%EA%B5%AD2.jpg?alt=media&token=1e4d4b55-f1b1-4e6f-a030-e06ca28a99d2')\n    sessionStorage.setItem('selectedRoom', `챗봇:지호+${currentUser.displayName}`)\n    \n    nav('/chatbox')\n  }\n\n  const removeUserToList = async(index) => {\n\n    alert(`채팅리스트에서 ${user.chatListName[index]}님이 삭제되었습니다😥`)\n    \n    const usersRef = collection(db, \"users\");\n    const querySnapshot = await getDocs(\n      query(usersRef, where(\"id\", \"==\", currentUser.email))\n    );\n    querySnapshot.forEach((doc) => {\n      updateDoc(doc.ref, {\n        chatListName : arrayRemove(doc.data().chatListName[index]),\n        chatListProfileUrl : arrayRemove(doc.data().chatListProfileUrl[index]),\n        chatListCreatedAt : arrayRemove(doc.data().chatListCreatedAt[index]),\n      });\n    });\n\n    nav('/chatlist')\n\n  };\n\n  return (\n    <div>\n      {user? (\n    <div className='chatlist_background'>\n      <div className={`chatlist_popup_page ${isVisible ? '' : 'hidden'}`}>\n        <button className='chatlist_popup_page_close' onClick={closePopup}>X</button>\n        <div className='chatlist_popup_page_text'>\n          <h4>💬 알림.</h4>\n          <p><strong>{currentUser.displayName}</strong>님, 설레이는 새로운 메세지가 도착했어요!</p>\n        </div>\n      </div>\n\n      <div className=\"login_bgm_b\">\n        <video className=\"login_bgm\" autoPlay muted loop>\n          <source src='videos/mainmain10.mp4' type='video/mp4' />\n        </video>\n      </div>\n\n      <div className='chatlist_box'>\n        <div className='chatlist_box_in'>\n          <div className='chatlist_list_header'><h1>~ group chat room ~</h1></div>\n          <hr/>\n          <div className='chatlist_inner_box'>\n          \n            <div>\n              <Tilt options={options} className='chat_list_contents' onClick={()=>handleClickBot()}>\n                <div className='chat_list_profile_img_box'><img className='chat_list_profile_img' src='https://firebasestorage.googleapis.com/v0/b/chatapp2-aa1ab.appspot.com/o/images%2F%EA%B5%AD2.jpg?alt=media&token=1e4d4b55-f1b1-4e6f-a030-e06ca28a99d2' /></div>\n                \n                <p className='chat_list_name'>챗봇:지호</p>\n                <p className='chat_list_talk_preview'>반가워요 ^^</p>\n              </Tilt>\n            {user.chatListName.map((chat, index) => (\n              <Tilt key={index} options={options} className='chat_list_contents' onClick={()=>handleClick(user, index)}>\n                \n                <div className='chat_list_profile_img_box'><img className='chat_list_profile_img' src={user.chatListProfileUrl[index]}/></div>\n                \n                <p className='chat_list_name'>{user.chatListName[index]}</p>\n                <p className='chat_list_talk_preview'>최근 메시지</p>\n                <button className='chatlist_chat_del_btn' onClick={()=>removeUserToList(index)}>나가기</button>\n              </Tilt>\n            ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    ): <Loading/>}\n    </div>\n  )\n}\n\nexport default ChatList;","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Matching.jsx",["102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117"],[],"import React, { useRef, useState, useContext, useEffect } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/css';\nimport 'swiper/css/effect-cards';\nimport { EffectCards } from 'swiper/modules';\nimport { AuthContext } from \"../context/AuthContext\";\n\nimport { Autoplay, Pagination, Navigation } from 'swiper/modules';\n\nimport { db, firebase } from \"../firebase-config\";\nimport {\n  collection,\n  where,\n  onSnapshot,\n  query,\n  orderBy,\n  getDocs,\n  updateDoc,\n  addDoc,\n  arrayUnion\n} from \"firebase/firestore\";\nimport { getStorage, ref, getDownloadURL, uploadBytes} from \"firebase/storage\";\n\n\nconst Matching = () => {\n\n  const { currentUser } = useContext(AuthContext);\n  const [user, setUser] = useState(null);\n  const [isVisiblePopup, setIsVisiblePopup] = useState(true);\n  const matClosePopup = () => {\n    setIsVisiblePopup(false);\n  };\n\n  const swiperRef = useRef(null);\n\n  const goNextSlide = () => {\n    if (swiperRef.current && swiperRef.current.swiper) {\n      swiperRef.current.swiper.slideNext();\n      console.log(users[0].matchId);\n      console.log(matchUsers);\n      console.log(users[0]);\n    }\n  };\n\n  const [users, setUsers] = useState([])\n  const [matchUsers, setMatchUsers] = useState([])\n  const userRef = collection(db, \"users\") \n    \n  useEffect(()=>{\n    if (currentUser && currentUser.email) {\n        const queryUsers = query(\n            userRef, where(\"id\", \"==\", currentUser.email)\n        )\n\n        const unsuscribe = onSnapshot(queryUsers, (snapshot)=>{\n            let users=[]\n            snapshot.forEach((doc)=>{\n                users.push({...doc.data(), id: doc.id})\n            })\n            setUsers(users)\n        })\n        return ()=> unsuscribe()\n    }\n  },[currentUser])\n\n  useEffect(() => {\n    if (currentUser && currentUser.email) {\n      const q = query(collection(db, \"users\"), where(\"id\", \"==\", currentUser.email));\n      getDocs(q).then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n          setUser(doc.data());\n        });\n      });\n    }\n  }, [currentUser]);\n\n\n  useEffect(() => {\n    if (users.length > 0 && users[0].matchId) {\n      const matchIdQueries = users[0].matchId.map((id) => (\n        query(userRef, where(\"id\", \"==\", id))\n      ));\n\n      Promise.all(matchIdQueries.map((q) => getDocs(q)))\n        .then((querySnapshots) => {\n          const matchedUsers = [];\n          querySnapshots.forEach((querySnapshot) => {\n            querySnapshot.forEach((doc) => {\n              if (doc.exists()) {\n                matchedUsers.push({ ...doc.data(), id: doc.id });\n              }\n            });\n          });\n          setMatchUsers(matchedUsers);\n\n          swiperRef.current.swiper.update();\n        });\n\n      const storage = getStorage();\n\n      // 수정된 부분: matchedUsers 배열 순회로 변경합니다.\n    \n    }\n  }, [users]);\n\n  const [addedUsers, setAddedUsers] = useState([]);\n  \n\n  const addUserToList = async(userName) => {\n    setAddedUsers((prevUsers) => [...prevUsers, userName]);\n    \n    // chatListName.push(userName.name)\n    // chatListProfileUrl.push(userName.profileUrl)\n    // chatListCreatedAt.push(userName.createdAt)\n    alert(`채팅리스트에 ${userName.name}님이 추가되었습니다😊`)\n    \n    const usersRef = collection(db, \"users\");\n    const querySnapshot = await getDocs(\n      query(usersRef, where(\"id\", \"==\", currentUser.email))\n    );\n    querySnapshot.forEach((doc) => {\n      updateDoc(doc.ref, {\n        chatListName : arrayUnion(userName.name),\n        chatListProfileUrl : arrayUnion(userName.profileUrl),\n        chatListCreatedAt : arrayUnion(userName.createdAt),\n        chatTest : arrayUnion(userName.name)\n      });\n    });\n  };\n\n      \n\n      \n\n\n  return (\n    <div className='matching_bg'>\n        <div className={isVisiblePopup ? 'mat_popup' : 'hidden'}>\n          <button className='mat_popup_close' onClick={matClosePopup}>X</button>\n          <div className='mat_popup_text'>\n            <h4>💬 알림.</h4>\n            <p><strong>{currentUser.displayName}</strong>님, 새로운 매칭이 도착했어요!</p>\n          </div>\n        </div>\n        <div className=\"login_bgm_b\">\n            <video className=\"login_bgm\" autoPlay muted loop>\n              <source src='videos/mainmain10.mp4' type='video/mp4' />\n            </video>\n        </div>\n        <div className='matching_in_box'>\n        <Swiper\n            effect={'cards'}\n            grabCursor={true}\n            modules={[EffectCards]}\n            className=\"mySwiper\"\n            ref={swiperRef}\n          >\n            {matchUsers.map((user)=>\n              <SwiperSlide key={user.name}>\n                <div className='mat_info_card'>\n                  <div className='info_img_box'>\n                    <img className='matching_img'  src={user.profileUrl} />\n                  </div>\n                  <div className='info_info_box'>\n                    {matchUsers.length > 0 && matchUsers[0] ? (\n                      <>\n                        <p>이름: {user.name}</p>\n                        <p>나이: {user.age}</p>\n                        <button className='matching_submit_button' onClick={()=>addUserToList(user)}>매칭하기</button>\n                      </>\n                    ) : (\n                      <p>Loading or no matched users found.</p>\n                    )}\n                  </div>\n                </div>\n              </SwiperSlide>\n            )}\n  \n          </Swiper>\n        </div>\n    </div>\n  )\n}\n\nexport default Matching","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/SideMenu.jsx",[],[],"/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Tendency.jsx",[],[],"/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Loading.jsx",[],[],"/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/index.js",[],[],"/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/context/AuthContext.js",[],[],"/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/firebase-config.js",[],[],"/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Header.jsx",[],[],"/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/ChatBox.jsx",["118","119","120","121","122","123","124","125"],[],"import React, { useState, useEffect, useContext} from 'react';\nimport { AuthContext } from \"../context/AuthContext\";\nimport { db, auth } from \"../firebase-config\";\nimport {\n  collection,\n  addDoc,\n  where,\n  serverTimestamp,\n  onSnapshot,\n  query,\n  orderBy,\n  getDocs,\n  updateDoc\n} from \"firebase/firestore\";\nimport { getStorage, ref, getDownloadURL } from \"firebase/storage\";\n\nimport { Link } from 'react-router-dom';\n\n\n\nconst ChatBox = ({room}) => {\n\n  const { currentUser } = useContext(AuthContext);\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const messagesRef = collection(db, \"messages\");\n  const [user, setUser] = useState(null);\n  const [selectedUserName, setSelectedUser] = useState(sessionStorage.getItem('selectedUserName' || ''))\n  const [selectedProfileUrl, setSelectedProfileUrl] = useState(sessionStorage.getItem('selectedUserProfileUrl' || ''))\n  const [selectedRoom, setSelectedRoom] = useState(sessionStorage.getItem('selectedRoom' || ''))\n\n\n\n  \n  useEffect(() => {\n    const queryMessages = query(\n      messagesRef,\n      where(\"room\", \"==\", selectedRoom),\n      orderBy(\"createdAt\")\n    );\n    const unsuscribe = onSnapshot(queryMessages, (snapshot) => {\n      let messages = [];\n      snapshot.forEach((doc) => {\n        messages.push({ ...doc.data(), id: doc.id });\n      });\n      console.log(messages);\n      setMessages(messages);\n    });\n    // console.log(`selected: ${selectedUser}`);\n    return () => unsuscribe();\n  }, []);\n\n  useEffect(() => {\n    if (currentUser && currentUser.email) {\n      const q = query(collection(db, \"users\"), where(\"id\", \"==\", currentUser.email));\n      getDocs(q).then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n          setUser(doc.data());\n        });\n      });\n    }\n  }, [currentUser]);\n\n  // 유저의 정보를 가져와 이미지 주소 지정\n  useEffect(() => {\n    if (user && user.profileUrl) {\n      const storage = getStorage();\n      getDownloadURL(ref(storage, user.profileUrl))\n        .then((url) => {\n          const img = document.getElementById('myPhoto');\n          img.setAttribute('src', url);\n          console.log(url);\n        })\n        .catch((error) => {\n          alert(`에러 : ${error}`);\n        });\n    }\n  }, [user]);\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    if (newMessage === \"\") return;\n    await addDoc(messagesRef, {\n      text: newMessage,\n      createdAt: serverTimestamp(),\n      user: currentUser.displayName,\n      room : selectedRoom\n    });\n\n\n    setNewMessage(\"\");\n  };\n\n\n  // 감정 이모티콘이 올라가게 올라가게 만드는 함수들입니다.\n  const [hartClicked, hartIsClicked] = useState(false);\n  const [sadClicked, sadIsClicked] = useState(false);\n  const [angryClicked, angryIsClicked] = useState(false);\n\n  const [hartKey, setHartKey] = useState(Math.random());\n  const [sadKey, setSadKey] = useState(Math.random());\n  const [angryKey, setAngryKey] = useState(Math.random());\n\n  const hart_Click = () => {\n    hartIsClicked(true);\n    setHartKey(Math.random()); \n    setTimeout(() => hartIsClicked(false), 3000);\n  };\n\n  const sad_Click = () => {\n    sadIsClicked(true);\n    setSadKey(Math.random()); \n    setTimeout(() => sadIsClicked(false), 3000);\n  };\n\n  const angry_Click = () => {\n    angryIsClicked(true);\n\n    setAngryKey(Math.random()); \n    setTimeout(() => angryIsClicked(false), 3000);\n  };;\n\n\n  return (\n    <div className='chatbox_bg'>\n      <div className=\"login_bgm_b\">\n        {/* <img src=\"img/main_photo.jpeg\" type='video/mp4' /> */}\n        <video className=\"login_bgm\" autoPlay muted loop>\n            <source src='videos/mainmain8.mp4' type='video/mp4' />\n        </video>\n      </div>\n      <div className='you_chat_Profil'>\n        <div className='chat_Profil_img_box'>\n          <img className='chat_Profil_img' src={selectedProfileUrl}/>\n        </div>\n        <h2 className='you_chat_Profil_name'>{selectedUserName}</h2>\n      </div>\n      <div className='chatbox_box'>\n        <div className='chatbox_btn_box'>\n          <Link to='/chatlist'><button className='chatbox_in_top_btn'>{\"< 나가기\"}</button></Link>\n          <button className='chatbox_in_top_btn'>{\"대화내용 지우기 >\"}</button>\n        </div>\n        <div className='messages'>\n          {messages.map((message) => (\n            <div key={message.id} className={`message ${message.user === currentUser.displayName ? \"my-message\" : \"other-message\"}`}>\n                <div className='chatbox_talk_box'><span className=\"user\">{message.text}</span> </div>\n            </div>\n          ))}\n        </div>\n        <form className='chatbox_input' onSubmit={handleSubmit}>\n          <input \n            className='chat_input_text' \n            type=\"text\" \n            value={newMessage}\n            onChange={(event) => setNewMessage(event.target.value)}\n          />\n          <button \n            className=\"chat_send_btn\" \n            type=\"submit\"\n          >\n            보내기\n          </button>\n        </form>\n      </div>\n      <div className='my_chat_Profil'>\n        <div  className='chat_Profil_img_box'>\n          <img id='myPhoto' className='chat_Profil_img'/>\n        </div>\n        \n        <h2 className='my_chat_Profil_name'>{currentUser.displayName}</h2>\n        {/* 해당 코드는 하트 이모션이 올라옵니다. */}\n        <div key={hartKey} className={`emt_hart ${hartClicked ? 'moveFadeOut' : ''}`}>💕</div>\n        <div key={sadKey} className={`emt_sad ${sadClicked ? 'moveFadeOut' : ''}`}>😢</div>\n        <div key={angryKey} className={`emt_angry ${angryClicked ? 'moveFadeOut' : ''}`}>👿</div>\n        \n        <div className='imotion_box'>\n\n          <button className='imotion_btn imotion_btn_hart_btn' onClick={hart_Click}>💕좋아</button>\n          <button className='imotion_btn imotion_btn_sad_btn' onClick={sad_Click}>😢슬퍼</button>\n          <button className='imotion_btn imotion_btn_angry_btn' onClick={angry_Click}>👿화나</button>\n        </div>\n      </div>\n\n    </div>\n  )\n}\n\nexport default ChatBox;","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Login.jsx",["126","127"],[],"import React, { useState } from \"react\";\nimport { useNavigate, Link } from \"react-router-dom\";\nimport { signInWithEmailAndPassword } from \"firebase/auth\";\nimport { auth } from \"../firebase-config\";\n\n\nconst Login = () => {\n\n  const [err, setErr] = useState(false);\n  const nav = useNavigate();\n\n  // 팝업창을 끄기 위해 만든 함수안에 들어가는 변수를 담기위한 것.-작업자 : 이찬용 \n  const [isVisible, setIsVisible] = useState(true);\n\n  \n  // main_popup_page_close 안에 들어가는 함수, 팝업창을 끄기 위한 함수.-작업자 : 이찬용\n  const closePopup = () => {\n      setIsVisible(false);\n  }\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const email = e.target[0].value;\n    const password = e.target[1].value;\n\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n      nav('/chatlist')\n    } catch (err) {\n      alert('이메일 혹은 비밀번호가 틀렸습니다!')\n      setErr(true);\n    }\n  };\n\n  return (\n    <div className='login_page'>\n          <div className={isVisible ? 'main_popup_page' : 'hidden'}>\n            <button className='main_popup_page_close' onClick={closePopup}>X</button>\n            <div className='main_popup_page_text'>\n              <h1>안녕하세요. 반가워요.</h1><br/>\n              <p>저희는 <strong>App</strong>반의 <strong>OS</strong>팀입니다. </p>\n              <p>저희가 제작한 웹서비스는 소개팅 웹입니다.</p>\n              <p>AI를 이용하여 취향을 분석한 뒤 딱 맞는 이성에게 매칭해 드립니다.</p>\n              <p>사랑해 주셔서 감사합니다.</p><br/>\n              <h4>팀원</h4>\n              <p>제작  :  이찬용, 전도희, 국지호, 임영찬</p>\n            </div>\n          </div>\n          <div className=\"login_bgm_b\">\n            <video className=\"login_bgm\" autoPlay muted loop>\n              <source src='videos/mainmain8.mp4' type='video/mp4' />\n            </video>\n          </div>\n          <div className='login_box'>\n            <div className=\"login_box_header_name\">\n              <h1>Login</h1>\n            </div>\n            <form onSubmit={handleSubmit} className=\"loginbox_in_input_box\">\n              <input\n              className=\"id_box\"\n              id=\"id\"\n              placeholder=\"이메일..\"\n              ></input>\n              <input\n              className=\"ps_box\"\n              id=\"password\"\n              type=\"password\"\n              placeholder=\"비밀번호..\"\n              \n              ></input>\n              <button className=\"login_submit_button\">Login</button>\n            </form>\n            {/* <a href='#' className=\"find_ps_id\">비밀번호 찾기 / 아이디 찾기</a> */}\n        </div>\n        <div className=\"login_desing_font1\">some.</div>\n        <div className=\"login_desing_font2\">line</div>\n    </div>\n  )\n}\n\nexport default Login;","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Footer.jsx",["128","129","130"],[],"import React from 'react'\n\nconst Footer = () => {\n  return (\n    <div className='footer'>\n      <div className='source'>\n        <hr/>\n        <img src='https://gj-aischool.or.kr/wp-content/uploads/2023/04/ais_dark.png'/>\n        <img src='https://www.data.go.kr/images/biz/common/logo/logo-footer-01.png'/>\n        <img src = 'https://knto.or.kr/humanframe/theme/kto/assets/image/_layout/logo_kto.svg'/>\n      </div>\n      <div className='member'>\n        <hr/>\n        <h3>4기 App 반 - OS TEAM</h3>\n        <p> 제작자 : 프론트 앤드 - 이찬용 ,  국지호 / 백앤드 - 임영찬 ,  전도희</p>\n        <strong>광주 인공지능 사관학교</strong>\n        <p> 주소 : 광주광역시 동구 제봉로 92 (대성학원 1-3층)</p>\n        <hr/>\n      </div>\n    </div>\n  )\n}\n\nexport default Footer","/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Signup.jsx",[],[],"/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Sidebar.jsx",[],[],"/Users/lee/Desktop/projectMain/SomeLine/projectSomeLine/src/components/Profile.jsx",["131","132","133","134"],[],"import React, { useRef, useState, useContext, useEffect } from 'react';\nimport 'swiper/css';\nimport 'swiper/css/effect-cards';\nimport {v4} from 'uuid'\nimport { AuthContext } from \"../context/AuthContext\";\nimport { db, firebase } from \"../firebase-config\";\nimport {\n  collection,\n  where,\n  onSnapshot,\n  query,\n  orderBy,\n  getDoc,\n  getDocs,\n  updateDoc\n} from \"firebase/firestore\";\nimport { updateProfile } from \"firebase/auth\"\nimport { getStorage, ref, getDownloadURL, uploadBytes} from \"firebase/storage\";\n\nconst Profile = () => {\n  const { currentUser } = useContext(AuthContext);\n  const [user, setUser] = useState(null);\n  const [imageUpload, setImageUpload] = useState(null);\n  const [profileImage, setProfileImage] = useState(null);\n  const [name, setName] = useState(\"\");\n\n  const [originalUser, setOriginalUser] = useState(null); // 작업자 : 이찬용 8월 5일 12시\n\n\n  const storage = getStorage(firebase);\n\n  // 현재 로그인 유저 정보 조회를 위한 기능\n  useEffect(() => {\n    if (currentUser && currentUser.email) {\n      const q = query(collection(db, \"users\"), where(\"id\", \"==\", currentUser.email));\n      getDocs(q).then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n          const userData = doc.data();\n          setUser(userData);\n          setOriginalUser(userData);\n  \n          // 초기 이름과 사진 상태 설정\n          setName(userData.name);\n          setProfileImage(userData.profileUrl);  // 이미지 URL 저장, Firebase Storage에서 가져옵니다.\n        });\n      });\n    }\n  }, [currentUser]);\n\n  useEffect(() => {\n    if (user && user.profileUrl) {\n      const storage = getStorage();\n      getDownloadURL(ref(storage, user.profileUrl))\n        .then((url) => {\n          const img = document.getElementById('myimg');\n          if (img) {\n            img.setAttribute('src', url);\n          }\n        })\n        .catch((error) => {\n          alert(`에러 : ${error}`);\n        });\n    }\n  }, [user]);\n\n\n  // user가 null인 경우, Loading 메시지를 표시\n  if (!user) {\n    return <p>Loading...</p>;\n  }\n\n  const handleImageChange = (event) => {\n    const file = event.target.files[0];\n    setImageUpload(file)\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onloadend = () => {\n      setProfileImage(reader.result);\n    };\n    console.log(`userRef: ${user}`);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    // 이름과 이미지가 비어 있는지를 확인 하기 위해 존재합니다.\n    const isNameChanged = name !== originalUser.name;\n    const isImageChanged = imageUpload !== null;\n\n    if (isNameChanged || isImageChanged) {      //프로필 내용추가되면. 여기도 추가, 이찬용: 8월 5일 12시\n      try {\n        let downloadUrl;\n        if (isImageChanged) {\n          const imageRef = ref(storage, `images/${name + v4()}`);\n          await uploadBytes(imageRef, imageUpload);\n          downloadUrl = await getDownloadURL(imageRef);\n        } else {\n          // 이미지가 들어오지 않으면 null값의 이미지로 변경시키는 문제가 발생하여 수정하여 넣은 부분입니다. -이찬용\n          // 이미지가 변경되지 않았다면 기존 URL을 사용합니다.\n          downloadUrl = originalUser.profileUrl;\n        }\n\n        await updateProfile(currentUser, {\n          displayName: isNameChanged ? name : originalUser.name,\n          photoURL: downloadUrl,\n        });\n  \n        const usersRef = collection(db, \"users\");\n        const querySnapshot = await getDocs(\n          query(usersRef, where(\"id\", \"==\", currentUser.email))\n        );\n        \n        // 삼항식을 추가 하였습니다. isNameChanged 가 트루면 name을 팔스면 originalUser.name를 사용하게 했습니다. --이찬용\n        // 변경되었으면 새로운 이름을 아니면 기존의 이름을 사용하게 하였습니다.  -- 이찬용\n        querySnapshot.forEach((doc) => {\n          updateDoc(doc.ref, {\n            name: isNameChanged ? name : originalUser.name,\n            profileUrl: downloadUrl,\n          });\n        });\n  \n        // 프로필 업데이트 후 새로운 사용자 정보를 가져와서 화면에 표시합니다. \n        const updatedUser = { ...user, name: isNameChanged ? name : originalUser.name, profileUrl: downloadUrl };\n        setUser(updatedUser);\n\n        alert('수정완료')\n      } catch (error) {\n        alert(`수정실패\\nerror: ${error}`);\n      }\n    } else {\n      alert(\"수정된 정보가 없습니다.\");\n    }\n  };\n\n  // user가 null이 아닌 경우, 프로필 정보를 화면에 표시\n  return (\n    <div className='matching_bg'>\n      <div className=\"login_bgm_b\">\n        <video className=\"login_bgm\" autoPlay muted loop>\n          <source src='videos/mainmain15.mp4' type='video/mp4' />\n        </video>\n      </div>\n      <div className='profile_in_box'>\n        <div className='profile_box_header_box'>\n          <div className='profile_box_logo'></div>\n          <div className='profile_box_header_name'>Profile</div>\n        </div>\n       \n        <div className='profile_img_chainge_box'>\n          <div className='profile_img_text'><h1>사진</h1></div>\n          <div className='profile_img_chainge_input_box'>\n            <div className='profile_img_chainge'>\n              <img \n                src={profileImage || currentUser.photoURL || 'defaultImageLink'} \n                alt=\"변경할 사진\" \n                className=\"profile_img_chainge_at\" \n              />\n            </div>\n            <input\n              type=\"file\"\n              onChange={handleImageChange}\n              accept=\"image/*\"\n              className='profile_img_chainge_btn'\n            />\n          </div>\n        </div>\n        <div  className='profile_name_chainge_box'>\n          <div className='profile_name_chainge_text'><h1>이름</h1></div>\n          <form className=\"profile_name_chainge_input\">\n            <input\n            className=\"profile_name_input_in\"\n            id=\"id\"\n            placeholder= {`현재 이름은 \"${user.name}\"입니다.`}\n            onChange={(e) => setName(e.target.value)}\n            maxLength={6}\n            // value={name}     // 플레이스 홀더보다 상위라서 홀더플레이스가 보이지 않는 현상이 일어났습니다. 그래서 주석처리함 --이찬용\n            ></input>\n          </form>\n        </div>\n        <div  className='profile_myinfo_box'>\n          <div className='profile_myinfo_box_text'><h1>자기 소개</h1></div>\n          <form className=\"profile_myinfo_box_input\">\n            <textarea\n            className=\"profile_myinfo_box_input_in\"\n            // id=\"id\"\n            type='textarea'\n            ></textarea>\n          </form>\n        </div>\n        <div className='profile_chainge_button_box'><button onClick={handleSubmit} className='profile_submit_button'>수정하기</button></div>\n      </div>\n      \n    </div>\n  );\n};\n\nexport default Profile;",{"ruleId":"135","severity":1,"message":"136","line":4,"column":8,"nodeType":"137","messageId":"138","endLine":4,"endColumn":14},{"ruleId":"135","severity":1,"message":"139","line":18,"column":38,"nodeType":"137","messageId":"138","endLine":18,"endColumn":46},{"ruleId":"135","severity":1,"message":"140","line":4,"column":14,"nodeType":"137","messageId":"138","endLine":4,"endColumn":18},{"ruleId":"135","severity":1,"message":"141","line":8,"column":3,"nodeType":"137","messageId":"138","endLine":8,"endColumn":13},{"ruleId":"135","severity":1,"message":"142","line":10,"column":3,"nodeType":"137","messageId":"138","endLine":10,"endColumn":10},{"ruleId":"135","severity":1,"message":"143","line":16,"column":10,"nodeType":"137","messageId":"138","endLine":16,"endColumn":18},{"ruleId":"135","severity":1,"message":"144","line":59,"column":17,"nodeType":"137","messageId":"138","endLine":59,"endColumn":25},{"ruleId":"135","severity":1,"message":"145","line":62,"column":9,"nodeType":"137","messageId":"138","endLine":62,"endColumn":16},{"ruleId":"135","severity":1,"message":"146","line":64,"column":10,"nodeType":"137","messageId":"138","endLine":64,"endColumn":22},{"ruleId":"135","severity":1,"message":"147","line":83,"column":9,"nodeType":"137","messageId":"138","endLine":83,"endColumn":18},{"ruleId":"148","severity":1,"message":"149","line":154,"column":60,"nodeType":"150","endLine":154,"endColumn":257},{"ruleId":"148","severity":1,"message":"149","line":162,"column":60,"nodeType":"150","endLine":162,"endColumn":137},{"ruleId":"135","severity":1,"message":"151","line":8,"column":10,"nodeType":"137","messageId":"138","endLine":8,"endColumn":18},{"ruleId":"135","severity":1,"message":"152","line":8,"column":20,"nodeType":"137","messageId":"138","endLine":8,"endColumn":30},{"ruleId":"135","severity":1,"message":"153","line":8,"column":32,"nodeType":"137","messageId":"138","endLine":8,"endColumn":42},{"ruleId":"135","severity":1,"message":"154","line":10,"column":14,"nodeType":"137","messageId":"138","endLine":10,"endColumn":22},{"ruleId":"135","severity":1,"message":"142","line":16,"column":3,"nodeType":"137","messageId":"138","endLine":16,"endColumn":10},{"ruleId":"135","severity":1,"message":"155","line":19,"column":3,"nodeType":"137","messageId":"138","endLine":19,"endColumn":9},{"ruleId":"135","severity":1,"message":"156","line":22,"column":22,"nodeType":"137","messageId":"138","endLine":22,"endColumn":25},{"ruleId":"135","severity":1,"message":"157","line":22,"column":27,"nodeType":"137","messageId":"138","endLine":22,"endColumn":41},{"ruleId":"135","severity":1,"message":"158","line":22,"column":43,"nodeType":"137","messageId":"138","endLine":22,"endColumn":54},{"ruleId":"135","severity":1,"message":"159","line":28,"column":10,"nodeType":"137","messageId":"138","endLine":28,"endColumn":14},{"ruleId":"135","severity":1,"message":"160","line":36,"column":9,"nodeType":"137","messageId":"138","endLine":36,"endColumn":20},{"ruleId":"161","severity":1,"message":"162","line":64,"column":5,"nodeType":"163","endLine":64,"endColumn":18,"suggestions":"164"},{"ruleId":"135","severity":1,"message":"165","line":99,"column":13,"nodeType":"137","messageId":"138","endLine":99,"endColumn":20},{"ruleId":"161","severity":1,"message":"162","line":104,"column":6,"nodeType":"163","endLine":104,"endColumn":13,"suggestions":"166"},{"ruleId":"135","severity":1,"message":"167","line":106,"column":10,"nodeType":"137","messageId":"138","endLine":106,"endColumn":20},{"ruleId":"148","severity":1,"message":"149","line":162,"column":21,"nodeType":"150","endLine":162,"endColumn":76},{"ruleId":"135","severity":1,"message":"140","line":3,"column":14,"nodeType":"137","messageId":"138","endLine":3,"endColumn":18},{"ruleId":"135","severity":1,"message":"168","line":13,"column":3,"nodeType":"137","messageId":"138","endLine":13,"endColumn":12},{"ruleId":"135","severity":1,"message":"169","line":28,"column":28,"nodeType":"137","messageId":"138","endLine":28,"endColumn":43},{"ruleId":"135","severity":1,"message":"170","line":29,"column":30,"nodeType":"137","messageId":"138","endLine":29,"endColumn":51},{"ruleId":"135","severity":1,"message":"171","line":30,"column":24,"nodeType":"137","messageId":"138","endLine":30,"endColumn":39},{"ruleId":"161","severity":1,"message":"172","line":51,"column":6,"nodeType":"163","endLine":51,"endColumn":8,"suggestions":"173"},{"ruleId":"148","severity":1,"message":"149","line":135,"column":11,"nodeType":"150","endLine":135,"endColumn":70},{"ruleId":"148","severity":1,"message":"149","line":168,"column":11,"nodeType":"150","endLine":168,"endColumn":58},{"ruleId":"135","severity":1,"message":"174","line":2,"column":23,"nodeType":"137","messageId":"138","endLine":2,"endColumn":27},{"ruleId":"135","severity":1,"message":"175","line":9,"column":10,"nodeType":"137","messageId":"138","endLine":9,"endColumn":13},{"ruleId":"148","severity":1,"message":"149","line":8,"column":9,"nodeType":"150","endLine":8,"endColumn":87},{"ruleId":"148","severity":1,"message":"149","line":9,"column":9,"nodeType":"150","endLine":9,"endColumn":86},{"ruleId":"148","severity":1,"message":"149","line":10,"column":9,"nodeType":"150","endLine":10,"endColumn":97},{"ruleId":"135","severity":1,"message":"176","line":1,"column":17,"nodeType":"137","messageId":"138","endLine":1,"endColumn":23},{"ruleId":"135","severity":1,"message":"141","line":10,"column":3,"nodeType":"137","messageId":"138","endLine":10,"endColumn":13},{"ruleId":"135","severity":1,"message":"142","line":12,"column":3,"nodeType":"137","messageId":"138","endLine":12,"endColumn":10},{"ruleId":"135","severity":1,"message":"177","line":13,"column":3,"nodeType":"137","messageId":"138","endLine":13,"endColumn":9},"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'Navigate' is defined but never used.","'auth' is defined but never used.","'onSnapshot' is defined but never used.","'orderBy' is defined but never used.","'chatList' is defined but never used.","'setChats' is assigned a value but never used.","'userRef' is assigned a value but never used.","'selectedUser' is assigned a value but never used.","'prevChats' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Autoplay' is defined but never used.","'Pagination' is defined but never used.","'Navigation' is defined but never used.","'firebase' is defined but never used.","'addDoc' is defined but never used.","'ref' is defined but never used.","'getDownloadURL' is defined but never used.","'uploadBytes' is defined but never used.","'user' is assigned a value but never used.","'goNextSlide' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userRef'. Either include it or remove the dependency array.","ArrayExpression",["178"],"'storage' is assigned a value but never used.",["179"],"'addedUsers' is assigned a value but never used.","'updateDoc' is defined but never used.","'setSelectedUser' is assigned a value but never used.","'setSelectedProfileUrl' is assigned a value but never used.","'setSelectedRoom' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'messagesRef' and 'selectedRoom'. Either include them or remove the dependency array.",["180"],"'Link' is defined but never used.","'err' is assigned a value but never used.","'useRef' is defined but never used.","'getDoc' is defined but never used.",{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},"Update the dependencies array to be: [currentUser, userRef]",{"range":"187","text":"188"},"Update the dependencies array to be: [userRef, users]",{"range":"189","text":"190"},"Update the dependencies array to be: [messagesRef, selectedRoom]",{"range":"191","text":"192"},[1732,1745],"[currentUser, userRef]",[2817,2824],"[userRef, users]",[1511,1513],"[messagesRef, selectedRoom]"]